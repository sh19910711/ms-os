#!/usr/bin/env python3
#
#
#    MakeStack app to Resea app Converter
#
#

import argparse
import glob
import os
import shutil
import subprocess
import sys
import jinja2
import yaml


APP_H_TEMPLATE = """\
#ifndef __MAKESTACKOS_APP_H__
#define __MAKESTACKOS_APP_H__

#include "../os.h"

{% for name, config in config.items() %}
#define {{ name }} ({{ config['cpp_value'] }})
{% endfor %}

{% for plugin in plugins %}
#include "../{{ plugin['name'] }}.h"
{% endfor %}

extern void setup();

#endif
"""

APP_YAML_TEMPLATE = """\
name: app
objs: [ {{ objs | join(',') }} ]
stack_size: 3000
requires:
  - channel
  - gpio
  - interrupt
  - timer
implements: []
"""


def load_yaml(path):
    return yaml.safe_load(open(path))


def generate_file(path, tmpl, args):
    with open(path, 'w') as f:
        f.write(jinja2.Template(tmpl).render(args))


class ValidationError(Exception):
    pass

def validate_application_yaml(yaml):
    if yaml['api'] != 1:
      raise ValidationError('unsupported API version (expected 1)')

    if yaml['lang'] != 'c++':
      raise ValidationError('unsupported language (expected c++)')


def validate_config_yaml(config):
    if not 'BOARD' in config:
      raise ValidationError('BOARD is not set')

    if config['BOARD']['value'] != 'esp8266':
      raise ValidationError('unsupported board (only esp8266 is supported)')


def convert_to_cpp_literal(type_, value):
    if type_ == 'string':
        return '"{}"'.format(value)
    else:
        return value


def download_plugin(name):

    plugin_dir = os.path.join('plugins', name)
    if os.path.exists(plugin_dir):
        # already downloaded
        return

    parent_dir = os.path.join('plugins', os.path.dirname(name))
    os.makedirs(parent_dir, exist_ok=True)

    print("Downloading {}...".format(name))

    p = subprocess.run(['git', 'clone', 'https://github.com/' + name, plugin_dir],
            stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    if p.returncode != 0:
        sys.exit("Plugin download error: {}".format(p.stdout.decode('utf-8').strip()))

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('app_path')
    parser.add_argument('build_dir')
    args = parser.parse_args()

    app_path = os.path.abspath(args.app_path)
    build_dir = args.build_dir

    yaml = load_yaml(os.path.join(app_path, 'application.yaml'))
    config = load_yaml(os.path.join(app_path, '.config.yaml'))

    validate_application_yaml(yaml)
    validate_config_yaml(config)

    for k,v in config.items():
      config[k]['cpp_value'] = convert_to_cpp_literal(v['type'], v['value'])

    sources = glob.glob('api/*') +list(map(lambda f: os.path.join(app_path, f), yaml['sources']))

    plugins = []
    for plugin_name in yaml.get("plugins"):
        if '/' in plugin_name:
            download_plugin(plugin_name)

        plugin_yaml = load_yaml(os.path.join('plugins', plugin_name, 'plugin.yaml'))
        sources += list(map(lambda f: os.path.join('plugins', plugin_name, f),
                            plugin_yaml['sources']))
        plugins.append(plugin_yaml)

    os.makedirs(build_dir, exist_ok=True)
    os.makedirs(os.path.join(build_dir, 'include'), exist_ok=True)

    objs = []
    for source in sources:
        basename, ext = os.path.splitext(source)
        if ext == '.cpp':
            objs.append(os.path.basename(basename) + '.o')

        if not source.startswith(build_dir):
            shutil.copyfile(source, os.path.join(build_dir,
                                                 os.path.basename(source)))

    generate_file(os.path.join(build_dir, 'include', 'app.h'),
                  APP_H_TEMPLATE, locals())
    generate_file(os.path.join(build_dir, 'app.yaml'),
                  APP_YAML_TEMPLATE, locals())

if __name__ == "__main__":
    main()
